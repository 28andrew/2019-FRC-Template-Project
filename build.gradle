plugins {
	// IDE: Automatically create IntelliJ configurations
	id "idea"
    // IDE: Automatically create Eclipse configurations
    id 'eclipse'
	// Java Support
    id "java"
	// Officially supported plugin for FRC-specific stuff including deploying to GradleRIO
    id "edu.wpi.first.GradleRIO" version "2019.1.1"      
}

// Using Java 11 (supported version by FRC)
sourceCompatibility = 1.11
targetCompatibility = 1.11

def ROBOT_MAIN_CLASS = "frc.team4277.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(4277)
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Defining dependencies. In this case, WPILib (+ friends), and some vendor libraries.
// Also defines JUnit 4 for unit testing (don't worry if it's not needed, it doesn't affect runtime jar, it's for tests)
dependencies {
    // WPI Java Libraries
    compile wpi.deps.wpilib()
    compile wpi.deps.vendor.java()
    // WPI JNI Libraries (they internally link Java methods to native C++ methods)
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)
    testCompile 'junit:junit:4.12'
}

// Setting up the 'fat jar' which includes all the compile and runtime dependencies.
// If dependencies weren't included, there would be a lot of 'NoClassDefError's.
// Also setting the MANIFEST files which tells the RoboRIO JVM where the main class is at
jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

// Defining the Gradle Wrapper version, the Gradle Wrapper is the Gradle installation included with this project
// Platform specific scripts for running that installation are included (ex: gradlew.bat for Windows)
wrapper {
	// After changing this version, run `gradlew wrapper` to update
    gradleVersion = '5.0'
}
